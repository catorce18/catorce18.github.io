(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.SvelteBulmaForms = {})));
}(this, (function (exports) { 'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function reinsertChildren(parent, target) {
		while (parent.firstChild) target.appendChild(parent.firstChild);
	}

	function reinsertBefore(after, target) {
		var parent = after.parentNode;
		while (parent.firstChild !== after) target.appendChild(parent.firstChild);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto = {
		destroy,
		get,
		fire,
		on,
		set,
		_recompute: noop,
		_set,
		_mount,
		_differs
	};

	/* src/dropdown/Dropdown.html generated by Svelte v2.9.7 */

	function icon({ active, up }) {
	  if (up) {
	    return active ? 'down' : 'up'
	  }
	  return active ? 'up' : 'down'
	}

	function classes({ active, hoverable, right, up }) {
	  const classList = ['dropdown'];

	  active && classList.push('is-active');
	  hoverable && classList.push('is-hoverable');
	  right && classList.push('is-right');
	  up && classList.push('is-up');

	  return classList.join(' ')
	}

	function data() {
		return {
	  active: false,
	  class: '',
	  hoverable: false,
	  label: '',
	  right: false,
	  up: false
	};
	}

	var methods = {
	  close () {
	    this.set({ active: false });
	  },
	  toggle () {
	    const { active } = this.get();
	    this.set({ active: !active });
	  }
	};

	function create_main_fragment(component, ctx) {
		var div, div_1, button, span, text, span_1, i, i_class_value, text_4, div_2, div_3, slot_content_default = component._slotted.default, div_class_value;

		function onwindowclick(event) {
			component.close();	}
		window.addEventListener("click", onwindowclick);

		function click_handler(event) {
			component.toggle();
		}

		function click_handler_1(event) {
			event.stopPropagation();
		}

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				button = createElement("button");
				span = createElement("span");
				text = createText("\n      ");
				span_1 = createElement("span");
				i = createElement("i");
				text_4 = createText("\n  ");
				div_2 = createElement("div");
				div_3 = createElement("div");
				i.className = i_class_value = "fa fa-angle-" + ctx.icon;
				setAttribute(i, "aria-hidden", "true");
				span_1.className = "icon is-small";
				addListener(button, "click", click_handler);
				button.className = "button";
				setAttribute(button, "aria-haspopup", "true");
				setAttribute(button, "aria-controls", "dropdown-menu");
				div_1.className = "dropdown-trigger";
				div_3.className = "dropdown-content";
				div_2.className = "dropdown-menu";
				div_2.id = "dropdown-menu";
				setAttribute(div_2, "role", "menu");
				addListener(div, "click", click_handler_1);
				div.className = div_class_value = "" + ctx.classes + " " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(button, div_1);
				appendNode(span, button);
				span.innerHTML = ctx.label;
				appendNode(text, button);
				appendNode(span_1, button);
				appendNode(i, span_1);
				appendNode(text_4, div);
				appendNode(div_2, div);
				appendNode(div_3, div_2);

				if (slot_content_default) {
					appendNode(slot_content_default, div_3);
				}
			},

			p(changed, ctx) {
				if (changed.label) {
					span.innerHTML = ctx.label;
				}

				if ((changed.icon) && i_class_value !== (i_class_value = "fa fa-angle-" + ctx.icon)) {
					i.className = i_class_value;
				}

				if ((changed.classes || changed.class) && div_class_value !== (div_class_value = "" + ctx.classes + " " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				window.removeEventListener("click", onwindowclick);

				if (detach) {
					detachNode(div);
				}

				removeListener(button, "click", click_handler);

				if (slot_content_default) {
					reinsertChildren(div_3, slot_content_default);
				}

				removeListener(div, "click", click_handler_1);
			}
		};
	}

	function Dropdown(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._recompute({ active: 1, up: 1, hoverable: 1, right: 1 }, this._state);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Dropdown.prototype, proto);
	assign(Dropdown.prototype, methods);

	Dropdown.prototype._recompute = function _recompute(changed, state) {
		if (changed.active || changed.up) {
			if (this._differs(state.icon, (state.icon = icon(state)))) changed.icon = true;
		}

		if (changed.active || changed.hoverable || changed.right || changed.up) {
			if (this._differs(state.classes, (state.classes = classes(state)))) changed.classes = true;
		}
	};

	/* src/dropdown/DropdownItem.html generated by Svelte v2.9.7 */

	function data$1() {
		return { class: '' };
	}

	function create_main_fragment$1(component, ctx) {
		var div, slot_content_default = component._slotted.default, div_class_value;

		return {
			c() {
				div = createElement("div");
				div.className = div_class_value = "dropdown-item " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, div);
				}
			},

			p(changed, ctx) {
				if ((changed.class) && div_class_value !== (div_class_value = "dropdown-item " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (slot_content_default) {
					reinsertChildren(div, slot_content_default);
				}
			}
		};
	}

	function DropdownItem(options) {
		init(this, options);
		this._state = assign(data$1(), options.data);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(DropdownItem.prototype, proto);

	/* src/dropdown/DropdownLink.html generated by Svelte v2.9.7 */

	function data$2() {
		return {
	  active: false
	};
	}

	var methods$1 = {
	  handleClick (event, href) {
	    event.preventDefault();
	    this.fire('click', href);
	  }
	};

	function create_main_fragment$2(component, ctx) {
		var a, slot_content_default = component._slotted.default, a_class_value;

		function click_handler(event) {
			component.handleClick(event, ctx.href);
		}

		return {
			c() {
				a = createElement("a");
				addListener(a, "click", click_handler);
				a.href = ctx.href;
				a.className = a_class_value = "dropdown-item" + (ctx.active ? ' is-active' : '');
			},

			m(target, anchor) {
				insertNode(a, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, a);
				}
			},

			p(changed, _ctx) {
				ctx = _ctx;
				if (changed.href) {
					a.href = ctx.href;
				}

				if ((changed.active) && a_class_value !== (a_class_value = "dropdown-item" + (ctx.active ? ' is-active' : ''))) {
					a.className = a_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				if (slot_content_default) {
					reinsertChildren(a, slot_content_default);
				}

				removeListener(a, "click", click_handler);
			}
		};
	}

	function DropdownLink(options) {
		init(this, options);
		this._state = assign(data$2(), options.data);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$2(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(DropdownLink.prototype, proto);
	assign(DropdownLink.prototype, methods$1);

	/* src/dropdown/DropdownDivider.html generated by Svelte v2.9.7 */

	function create_main_fragment$3(component, ctx) {
		var hr;

		return {
			c() {
				hr = createElement("hr");
				hr.className = "dropdown-divider";
			},

			m(target, anchor) {
				insertNode(hr, target, anchor);
			},

			p: noop,

			d(detach) {
				if (detach) {
					detachNode(hr);
				}
			}
		};
	}

	function DropdownDivider(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment$3(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(DropdownDivider.prototype, proto);

	/* src/modal/Modal.html generated by Svelte v2.9.7 */

	function data$3() {
		return {
	  active: false,
	  class: ''
	};
	}

	function onupdate({ current, previous }) {
	  if (previous && !current.active) {
	    this.fire('close', this);
	  }
	  if (current.active) {
	    this.fire('open', this);
	  }
	}
	function create_main_fragment$4(component, ctx) {
		var div, div_1, text, div_2, slot_content_default = component._slotted.default, text_2, button, div_class_value;

		function click_handler(event) {
			component.set({ active: false });
		}

		function click_handler_1(event) {
			event.stopPropagation();
		}

		function click_handler_2(event) {
			component.set({ active: false });
		}

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				text = createText("\n  ");
				div_2 = createElement("div");
				text_2 = createText("\n  ");
				button = createElement("button");
				addListener(div_1, "click", click_handler);
				div_1.className = "modal-background";
				addListener(div_2, "click", click_handler_1);
				div_2.className = "modal-content";
				addListener(button, "click", click_handler_2);
				button.className = "modal-close is-large";
				setAttribute(button, "aria-label", "close");
				div.className = div_class_value = "modal" + (ctx.active ? ' is-active' : '') + " " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text, div);
				appendNode(div_2, div);

				if (slot_content_default) {
					appendNode(slot_content_default, div_2);
				}

				appendNode(text_2, div);
				appendNode(button, div);
			},

			p(changed, ctx) {
				if ((changed.active || changed.class) && div_class_value !== (div_class_value = "modal" + (ctx.active ? ' is-active' : '') + " " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div_1, "click", click_handler);

				if (slot_content_default) {
					reinsertChildren(div_2, slot_content_default);
				}

				removeListener(div_2, "click", click_handler_1);
				removeListener(button, "click", click_handler_2);
			}
		};
	}

	function Modal(options) {
		init(this, options);
		this._state = assign(data$3(), options.data);
		this._intro = true;
		this._handlers.update = [onupdate];

		this._slotted = options.slots || {};

		if (!options.root) {
			this._oncreate = [];
		}

		this.slots = {};

		this._fragment = create_main_fragment$4(this, this._state);

		this.root._oncreate.push(() => {
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}
	}

	assign(Modal.prototype, proto);

	/* src/modal/ModalCard.html generated by Svelte v2.9.7 */

	function data$4() {
		return {
	  active: false,
	  class: ''
	};
	}

	var methods$2 = {
	  success () {
	    this.set({ active: false });
	    this.fire('close', 'success');
	  },
	  cancel () {
	    this.set({ active: false });
	    this.fire('close', 'cancel');
	  }
	};

	function onupdate$1({ current, previous }) {
	  if (current.active) {
	    this.fire('open', this);
	  }
	}
	function create_main_fragment$5(component, ctx) {
		var div, div_1, text, div_2, header, p, slot_content_title = component._slotted.title, text_2, button, text_4, section, slot_content_content = component._slotted.content, text_6, footer, button_1, slot_content_success = component._slotted.success, text_7, button_1_class_value, text_9, button_2, slot_content_cancel = component._slotted.cancel, text_10, div_class_value;

		function click_handler(event) {
			component.cancel();
		}

		function click_handler_1(event) {
			component.cancel();
		}

		function click_handler_2(event) {
			component.success();
		}

		function click_handler_3(event) {
			component.cancel();
		}

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				text = createText("\n  ");
				div_2 = createElement("div");
				header = createElement("header");
				p = createElement("p");
				text_2 = createText("\n      ");
				button = createElement("button");
				text_4 = createText("\n    ");
				section = createElement("section");
				text_6 = createText("\n    ");
				footer = createElement("footer");
				button_1 = createElement("button");
				if (!slot_content_success) {
					text_7 = createText("Submit");
				}
				text_9 = createText("\n      ");
				button_2 = createElement("button");
				if (!slot_content_cancel) {
					text_10 = createText("Cancel");
				}
				addListener(div_1, "click", click_handler);
				div_1.className = "modal-background";
				p.className = "modal-card-title";
				addListener(button, "click", click_handler_1);
				button.className = "delete";
				setAttribute(button, "aria-label", "close");
				header.className = "modal-card-head";
				section.className = "modal-card-body";
				addListener(button_1, "click", click_handler_2);
				button_1.className = button_1_class_value = "button is-" + (ctx.color || 'success');
				addListener(button_2, "click", click_handler_3);
				button_2.className = "button";
				footer.className = "modal-card-foot";
				div_2.className = "modal-card";
				div.className = div_class_value = "modal" + (ctx.active ? ' is-active' : '') + " " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text, div);
				appendNode(div_2, div);
				appendNode(header, div_2);
				appendNode(p, header);

				if (slot_content_title) {
					appendNode(slot_content_title, p);
				}

				appendNode(text_2, header);
				appendNode(button, header);
				appendNode(text_4, div_2);
				appendNode(section, div_2);

				if (slot_content_content) {
					appendNode(slot_content_content, section);
				}

				appendNode(text_6, div_2);
				appendNode(footer, div_2);
				appendNode(button_1, footer);
				if (!slot_content_success) {
					appendNode(text_7, button_1);
				}

				else {
					appendNode(slot_content_success, button_1);
				}

				appendNode(text_9, footer);
				appendNode(button_2, footer);
				if (!slot_content_cancel) {
					appendNode(text_10, button_2);
				}

				else {
					appendNode(slot_content_cancel, button_2);
				}
			},

			p(changed, ctx) {
				if ((changed.color) && button_1_class_value !== (button_1_class_value = "button is-" + (ctx.color || 'success'))) {
					button_1.className = button_1_class_value;
				}

				if ((changed.active || changed.class) && div_class_value !== (div_class_value = "modal" + (ctx.active ? ' is-active' : '') + " " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(div_1, "click", click_handler);

				if (slot_content_title) {
					reinsertChildren(p, slot_content_title);
				}

				removeListener(button, "click", click_handler_1);

				if (slot_content_content) {
					reinsertChildren(section, slot_content_content);
				}

				if (slot_content_success) {
					reinsertChildren(button_1, slot_content_success);
				}

				removeListener(button_1, "click", click_handler_2);

				if (slot_content_cancel) {
					reinsertChildren(button_2, slot_content_cancel);
				}

				removeListener(button_2, "click", click_handler_3);
			}
		};
	}

	function ModalCard(options) {
		init(this, options);
		this._state = assign(data$4(), options.data);
		this._intro = true;
		this._handlers.update = [onupdate$1];

		this._slotted = options.slots || {};

		if (!options.root) {
			this._oncreate = [];
		}

		this.slots = {};

		this._fragment = create_main_fragment$5(this, this._state);

		this.root._oncreate.push(() => {
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}
	}

	assign(ModalCard.prototype, proto);
	assign(ModalCard.prototype, methods$2);

	/* src/navbar/Navbar.html generated by Svelte v2.9.7 */

	function classes$1({ color, fixedTop, fixedBottom, transparent }) {
	  const classList = ['navbar'];

	  color && classList.push(`is-${color}`);
	  fixedTop && classList.push('is-fixed-top');
	  fixedBottom && classList.push('is-fixed-bottom');
	  transparent && classList.push('is-transparent');

	  return classList.join(' ')
	}

	function activeClass({ active }) {
		return active ? ' is-active' : '';
	}

	function data$5() {
		return {
	  active: false,
	  class: '',
	  color: '',
	  fixedTop: false,
	  fixedBottom: false,
	  transparent: false,
	  noBodyClass: false
	};
	}

	var methods$3 = {
	  close () {
	    this.set({ active: false });
	  },
	  toggle (event) {
	    event.preventDefault();
	    event.stopPropagation();
	    const { active } = this.get();
	    this.set({ active: !active });
	  }
	};

	function onupdate$2({ changed, current, previous }) {
	  if (current.noBodyClass) {
	    return
	  }
	  const body = document.querySelector('body');
	  if (changed.fixedTop) {
	    current.fixedTop ? body.classList.add('has-navbar-fixed-top')
	                     : body.classList.remove('has-navbar-fixed-top');
	  }
	  if (changed.fixedBottom) {
	    current.fixedBottom ? body.classList.add('has-navbar-fixed-bottom')
	                        : body.classList.remove('has-navbar-fixed-bottom');
	  }
	}
	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1kmf6yh-style';
		style.textContent = "@media screen and (min-width: 1088px){.navbar.svelte-1kmf6yh span{align-items:stretch;display:flex}}";
		appendNode(style, document.head);
	}

	function create_main_fragment$6(component, ctx) {
		var nav, div, slot_content_brand = component._slotted.brand, slot_content_brand_after, text, a, a_class_value, text_5, div_1, slot_content_default = component._slotted.default, div_1_class_value, nav_class_value;

		function onwindowclick(event) {
			component.close();	}
		window.addEventListener("click", onwindowclick);

		function click_handler(event) {
			component.toggle(event);
		}

		return {
			c() {
				nav = createElement("nav");
				div = createElement("div");
				text = createText("\n\n    ");
				a = createElement("a");
				a.innerHTML = "<span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>";
				text_5 = createText("\n\n  ");
				div_1 = createElement("div");
				addListener(a, "click", click_handler);
				a.href = "/";
				setAttribute(a, "role", "button");
				a.className = a_class_value = "navbar-burger" + ctx.activeClass + " svelte-1kmf6yh";
				setAttribute(a, "aria-label", "menu");
				setAttribute(a, "aria-expanded", ctx.active);
				div.className = "navbar-brand svelte-1kmf6yh";
				div_1.className = div_1_class_value = "navbar-menu" + ctx.activeClass + " svelte-1kmf6yh";
				nav.className = nav_class_value = "" + ctx.classes + " " + ctx.class + " svelte-1kmf6yh";
				setAttribute(nav, "role", "navigation");
				setAttribute(nav, "aria-label", "main navigation");
			},

			m(target, anchor) {
				insertNode(nav, target, anchor);
				appendNode(div, nav);

				if (slot_content_brand) {
					appendNode(slot_content_brand, div);
					appendNode(slot_content_brand_after || (slot_content_brand_after = createComment()), div);
				}

				appendNode(text, div);
				appendNode(a, div);
				appendNode(text_5, nav);
				appendNode(div_1, nav);

				if (slot_content_default) {
					appendNode(slot_content_default, div_1);
				}
			},

			p(changed, ctx) {
				if ((changed.activeClass) && a_class_value !== (a_class_value = "navbar-burger" + ctx.activeClass + " svelte-1kmf6yh")) {
					a.className = a_class_value;
				}

				if (changed.active) {
					setAttribute(a, "aria-expanded", ctx.active);
				}

				if ((changed.activeClass) && div_1_class_value !== (div_1_class_value = "navbar-menu" + ctx.activeClass + " svelte-1kmf6yh")) {
					div_1.className = div_1_class_value;
				}

				if ((changed.classes || changed.class) && nav_class_value !== (nav_class_value = "" + ctx.classes + " " + ctx.class + " svelte-1kmf6yh")) {
					nav.className = nav_class_value;
				}
			},

			d(detach) {
				window.removeEventListener("click", onwindowclick);

				if (detach) {
					detachNode(nav);
				}

				if (slot_content_brand) {
					reinsertBefore(slot_content_brand_after, slot_content_brand);
				}

				removeListener(a, "click", click_handler);

				if (slot_content_default) {
					reinsertChildren(div_1, slot_content_default);
				}
			}
		};
	}

	function Navbar(options) {
		init(this, options);
		this._state = assign(data$5(), options.data);
		this._recompute({ color: 1, fixedTop: 1, fixedBottom: 1, transparent: 1, active: 1 }, this._state);
		this._intro = true;
		this._handlers.update = [onupdate$2];

		this._slotted = options.slots || {};

		if (!document.getElementById("svelte-1kmf6yh-style")) add_css();

		if (!options.root) {
			this._oncreate = [];
		}

		this.slots = {};

		this._fragment = create_main_fragment$6(this, this._state);

		this.root._oncreate.push(() => {
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}
	}

	assign(Navbar.prototype, proto);
	assign(Navbar.prototype, methods$3);

	Navbar.prototype._recompute = function _recompute(changed, state) {
		if (changed.color || changed.fixedTop || changed.fixedBottom || changed.transparent) {
			if (this._differs(state.classes, (state.classes = classes$1(state)))) changed.classes = true;
		}

		if (changed.active) {
			if (this._differs(state.activeClass, (state.activeClass = activeClass(state)))) changed.activeClass = true;
		}
	};

	/* src/navbar/NavbarDivider.html generated by Svelte v2.9.7 */

	function create_main_fragment$7(component, ctx) {
		var hr;

		return {
			c() {
				hr = createElement("hr");
				hr.className = "navbar-divider";
			},

			m(target, anchor) {
				insertNode(hr, target, anchor);
			},

			p: noop,

			d(detach) {
				if (detach) {
					detachNode(hr);
				}
			}
		};
	}

	function NavbarDivider(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment$7(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(NavbarDivider.prototype, proto);

	/* src/navbar/NavbarDropdown.html generated by Svelte v2.9.7 */

	function activeClass$1({ active }) {
		return active ? ' is-active' : '';
	}

	function boxedClass({ boxed }) {
		return boxed ? ' is-boxed' : '';
	}

	function hoverableClass({ hoverable }) {
		return hoverable ? ' is-hoverable' : '';
	}

	function rightClass({ right }) {
		return right ? ' is-right' : '';
	}

	function upClass({ dropup }) {
		return dropup ? ' has-dropdown-up' : '';
	}

	function data$6() {
		return {
	  active: false,
	  boxed: false,
	  class: '',
	  hoverable: false,
	  label: '',
	  dropup: false,
	  right: false
	};
	}

	var methods$4 = {
	  close () {
	    this.set({ active: false });
	  },
	  toggle (event) {
	    event.stopPropagation();
	    const { active } = this.get();
	    this.set({ active: !active });
	  }
	};

	function add_css$1() {
		var style = createElement("style");
		style.id = 'svelte-13fpb60-style';
		style.textContent = ".navbar-item.svelte-13fpb60>.navbar-link.svelte-13fpb60{align-items:center;cursor:pointer}";
		appendNode(style, document.head);
	}

	function create_main_fragment$8(component, ctx) {
		var div, span, text_1, div_1, slot_content_default = component._slotted.default, div_1_class_value, div_class_value;

		function onwindowclick(event) {
			component.close();	}
		window.addEventListener("click", onwindowclick);

		function click_handler(event) {
			component.toggle(event);
		}

		return {
			c() {
				div = createElement("div");
				span = createElement("span");
				text_1 = createText("\n\n    ");
				div_1 = createElement("div");
				addListener(span, "click", click_handler);
				span.className = "navbar-link svelte-13fpb60";
				div_1.className = div_1_class_value = "navbar-dropdown" + ctx.rightClass + ctx.boxedClass + " svelte-13fpb60";
				div.className = div_class_value = "navbar-item has-dropdown" + ctx.activeClass + ctx.hoverableClass + ctx.upClass + " " + ctx.class + " svelte-13fpb60";
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(span, div);
				span.innerHTML = ctx.label;
				appendNode(text_1, div);
				appendNode(div_1, div);

				if (slot_content_default) {
					appendNode(slot_content_default, div_1);
				}
			},

			p(changed, ctx) {
				if (changed.label) {
					span.innerHTML = ctx.label;
				}

				if ((changed.rightClass || changed.boxedClass) && div_1_class_value !== (div_1_class_value = "navbar-dropdown" + ctx.rightClass + ctx.boxedClass + " svelte-13fpb60")) {
					div_1.className = div_1_class_value;
				}

				if ((changed.activeClass || changed.hoverableClass || changed.upClass || changed.class) && div_class_value !== (div_class_value = "navbar-item has-dropdown" + ctx.activeClass + ctx.hoverableClass + ctx.upClass + " " + ctx.class + " svelte-13fpb60")) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				window.removeEventListener("click", onwindowclick);

				if (detach) {
					detachNode(div);
				}

				removeListener(span, "click", click_handler);

				if (slot_content_default) {
					reinsertChildren(div_1, slot_content_default);
				}
			}
		};
	}

	function NavbarDropdown(options) {
		init(this, options);
		this._state = assign(data$6(), options.data);
		this._recompute({ active: 1, boxed: 1, hoverable: 1, right: 1, dropup: 1 }, this._state);
		this._intro = true;

		this._slotted = options.slots || {};

		if (!document.getElementById("svelte-13fpb60-style")) add_css$1();

		this.slots = {};

		this._fragment = create_main_fragment$8(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(NavbarDropdown.prototype, proto);
	assign(NavbarDropdown.prototype, methods$4);

	NavbarDropdown.prototype._recompute = function _recompute(changed, state) {
		if (changed.active) {
			if (this._differs(state.activeClass, (state.activeClass = activeClass$1(state)))) changed.activeClass = true;
		}

		if (changed.boxed) {
			if (this._differs(state.boxedClass, (state.boxedClass = boxedClass(state)))) changed.boxedClass = true;
		}

		if (changed.hoverable) {
			if (this._differs(state.hoverableClass, (state.hoverableClass = hoverableClass(state)))) changed.hoverableClass = true;
		}

		if (changed.right) {
			if (this._differs(state.rightClass, (state.rightClass = rightClass(state)))) changed.rightClass = true;
		}

		if (changed.dropup) {
			if (this._differs(state.upClass, (state.upClass = upClass(state)))) changed.upClass = true;
		}
	};

	/* src/navbar/NavbarEnd.html generated by Svelte v2.9.7 */

	function data$7() {
		return { class: '' };
	}

	function create_main_fragment$9(component, ctx) {
		var div, slot_content_default = component._slotted.default, div_class_value;

		return {
			c() {
				div = createElement("div");
				div.className = div_class_value = "navbar-end " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, div);
				}
			},

			p(changed, ctx) {
				if ((changed.class) && div_class_value !== (div_class_value = "navbar-end " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (slot_content_default) {
					reinsertChildren(div, slot_content_default);
				}
			}
		};
	}

	function NavbarEnd(options) {
		init(this, options);
		this._state = assign(data$7(), options.data);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$9(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(NavbarEnd.prototype, proto);

	/* src/navbar/NavbarItem.html generated by Svelte v2.9.7 */

	function activeClass$2({ active }) {
		return active ? ' is-active' : '';
	}

	function expandedClass({ expanded }) {
		return expanded ? ' is-expanded' : '';
	}

	function data$8() {
		return {
	  href: false,
	  active: false,
	  class: '',
	  expanded: false
	};
	}

	function create_main_fragment$a(component, ctx) {
		var if_block_anchor;

		function select_block_type(ctx) {
			if (ctx.href) return create_if_block;
			return create_if_block_1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = createComment();
			},

			m(target, anchor) {
				if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			d(detach) {
				if_block.d(detach);
				if (detach) {
					detachNode(if_block_anchor);
				}
			}
		};
	}

	// (1:0) {#if href}
	function create_if_block(component, ctx) {
		var a, slot_content_default = component._slotted.default, a_class_value;

		return {
			c() {
				a = createElement("a");
				a.className = a_class_value = "navbar-item" + ctx.activeClass + ctx.expandedClass + " " + ctx.class;
				a.href = ctx.href;
			},

			m(target, anchor) {
				insertNode(a, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, a);
				}
			},

			p(changed, ctx) {
				if ((changed.activeClass || changed.expandedClass || changed.class) && a_class_value !== (a_class_value = "navbar-item" + ctx.activeClass + ctx.expandedClass + " " + ctx.class)) {
					a.className = a_class_value;
				}

				if (changed.href) {
					a.href = ctx.href;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				if (slot_content_default) {
					reinsertChildren(a, slot_content_default);
				}
			}
		};
	}

	// (5:0) {:else}
	function create_if_block_1(component, ctx) {
		var div, slot_content_default = component._slotted.default, div_class_value;

		return {
			c() {
				div = createElement("div");
				div.className = div_class_value = "navbar-item" + ctx.activeClass + ctx.expandedClass + " " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, div);
				}
			},

			p(changed, ctx) {
				if ((changed.activeClass || changed.expandedClass || changed.class) && div_class_value !== (div_class_value = "navbar-item" + ctx.activeClass + ctx.expandedClass + " " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (slot_content_default) {
					reinsertChildren(div, slot_content_default);
				}
			}
		};
	}

	function NavbarItem(options) {
		init(this, options);
		this._state = assign(data$8(), options.data);
		this._recompute({ active: 1, expanded: 1 }, this._state);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$a(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(NavbarItem.prototype, proto);

	NavbarItem.prototype._recompute = function _recompute(changed, state) {
		if (changed.active) {
			if (this._differs(state.activeClass, (state.activeClass = activeClass$2(state)))) changed.activeClass = true;
		}

		if (changed.expanded) {
			if (this._differs(state.expandedClass, (state.expandedClass = expandedClass(state)))) changed.expandedClass = true;
		}
	};

	/* src/navbar/NavbarStart.html generated by Svelte v2.9.7 */

	function data$9() {
		return { class: '' };
	}

	function create_main_fragment$b(component, ctx) {
		var div, slot_content_default = component._slotted.default, div_class_value;

		return {
			c() {
				div = createElement("div");
				div.className = div_class_value = "navbar-start " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);

				if (slot_content_default) {
					appendNode(slot_content_default, div);
				}
			},

			p(changed, ctx) {
				if ((changed.class) && div_class_value !== (div_class_value = "navbar-start " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (slot_content_default) {
					reinsertChildren(div, slot_content_default);
				}
			}
		};
	}

	function NavbarStart(options) {
		init(this, options);
		this._state = assign(data$9(), options.data);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$b(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(NavbarStart.prototype, proto);

	/* src/pagination/PaginationLink.html generated by Svelte v2.9.7 */

	function disabled({ current, page, total }) {
	  if (Number(current) === 1 && Number(page) === 1) {
	    return true
	  }
	  if (Number(current) === Number(total) && Number(page) === Number(total)) {
	    return true
	  }
	  return false
	}

	function data$a() {
		return {
	  current: false,
	  page: 1,
	  total: 10,
	  show: 3,
	  showEllipsis: true
	};
	}

	var methods$5 = {
	  noop (event) {
	    event.preventDefault();
	  },
	  goto (event, page) {
	    event.preventDefault();
	    this.set({ current: page });
	    this.fire('change', page);
	  }
	};

	function create_main_fragment$c(component, ctx) {
		var li;

		function select_block_type(ctx) {
			if (ctx.disabled) return create_if_block$1;
			if (ctx.Number(ctx.current) === ctx.page) return create_if_block_1$1;
			return create_if_block_2;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		return {
			c() {
				li = createElement("li");
				if_block.c();
			},

			m(target, anchor) {
				insertNode(li, target, anchor);
				if_block.m(li, null);
			},

			p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(li, null);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(li);
				}

				if_block.d();
			}
		};
	}

	// (2:0) {#if disabled}
	function create_if_block$1(component, ctx) {
		var a, text;

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.page);
				a.href = "/";
				a.className = "pagination-link";
				setAttribute(a, "disabled", true);
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, ctx) {
				if (changed.page) {
					text.data = ctx.page;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}
			}
		};
	}

	// (4:34) 
	function create_if_block_1$1(component, ctx) {
		var a, text, a_aria_label_value;

		function click_handler(event) {
			component.noop(event);
		}

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.page);
				addListener(a, "click", click_handler);
				a.href = "/";
				a.className = "pagination-link is-current";
				setAttribute(a, "aria-label", a_aria_label_value = "Page " + ctx.page);
				setAttribute(a, "aria-current", "page");
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, ctx) {
				if (changed.page) {
					text.data = ctx.page;
				}

				if ((changed.page) && a_aria_label_value !== (a_aria_label_value = "Page " + ctx.page)) {
					setAttribute(a, "aria-label", a_aria_label_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				removeListener(a, "click", click_handler);
			}
		};
	}

	// (10:0) {:else}
	function create_if_block_2(component, ctx) {
		var a, text, a_aria_label_value;

		function click_handler(event) {
			component.goto(event, ctx.page);
		}

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.page);
				addListener(a, "click", click_handler);
				a.href = "/";
				a.className = "pagination-link";
				setAttribute(a, "aria-label", a_aria_label_value = "Goto page " + ctx.page);
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, _ctx) {
				ctx = _ctx;
				if (changed.page) {
					text.data = ctx.page;
				}

				if ((changed.page) && a_aria_label_value !== (a_aria_label_value = "Goto page " + ctx.page)) {
					setAttribute(a, "aria-label", a_aria_label_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				removeListener(a, "click", click_handler);
			}
		};
	}

	function PaginationLink(options) {
		init(this, options);
		this._state = assign(assign({ Number : Number }, data$a()), options.data);
		this._recompute({ current: 1, page: 1, total: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment$c(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(PaginationLink.prototype, proto);
	assign(PaginationLink.prototype, methods$5);

	PaginationLink.prototype._recompute = function _recompute(changed, state) {
		if (changed.current || changed.page || changed.total) {
			if (this._differs(state.disabled, (state.disabled = disabled(state)))) changed.disabled = true;
		}
	};

	/* src/pagination/Pagination.html generated by Svelte v2.9.7 */

	function currentClass({ current }) {
		return current ? ' is-current' : '';
	}

	function classes$2({ align, rounded, size }) {
	  const classList = ['pagination'];

	  align && classList.push(`is-${align}`);
	  size && classList.push(`is-${size}`);
	  rounded && classList.push('is-rounded');

	  return classList.join(' ')
	}

	function showLeft({ current, show }) {
		return Number(current) - Math.floor(show / 2);
	}

	function showRight({ current, show }) {
		return Number(current) + Math.floor(show / 2);
	}

	function pages({ total, showLeft, showRight }) {
	  const list = [];
	  for (let i = showLeft; i <= showRight; i++) {
	    if (i > 1 && i < total) {
	      list.push(i);
	    }
	  }
	  return list
	}

	function data$b() {
		return {
	  current: 1,
	  class: '',
	  total: 10,
	  show: 5,
	  noIncremental: false,
	  noList: false,
	  align: '',
	  rounded: false,
	  size: '',
	  previous: 'Previous',
	  next: 'Next page'
	};
	}

	var methods$6 = {
	  goto (event, page) {
	    event.preventDefault();
	    this.set({ current: page });
	    this.fire('change', page);
	  },
	  setPage (page) {
	    this.set({ current: page });
	    this.fire('change', page);
	  }
	};

	function create_main_fragment$d(component, ctx) {
		var nav, text, nav_class_value;

		var if_block = (!ctx.noIncremental) && create_if_block$2(component, ctx);

		var if_block_1 = (!ctx.noList) && create_if_block_5(component, ctx);

		return {
			c() {
				nav = createElement("nav");
				if (if_block) if_block.c();
				text = createText("\n");
				if (if_block_1) if_block_1.c();
				nav.className = nav_class_value = "" + ctx.classes + " " + ctx.class;
				setAttribute(nav, "role", "navigation");
				setAttribute(nav, "aria-label", "pagination");
			},

			m(target, anchor) {
				insertNode(nav, target, anchor);
				if (if_block) if_block.m(nav, null);
				appendNode(text, nav);
				if (if_block_1) if_block_1.m(nav, null);
			},

			p(changed, ctx) {
				if (!ctx.noIncremental) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$2(component, ctx);
						if_block.c();
						if_block.m(nav, text);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (!ctx.noList) {
					if (if_block_1) {
						if_block_1.p(changed, ctx);
					} else {
						if_block_1 = create_if_block_5(component, ctx);
						if_block_1.c();
						if_block_1.m(nav, null);
					}
				} else if (if_block_1) {
					if_block_1.d(1);
					if_block_1 = null;
				}

				if ((changed.classes || changed.class) && nav_class_value !== (nav_class_value = "" + ctx.classes + " " + ctx.class)) {
					nav.className = nav_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(nav);
				}

				if (if_block) if_block.d();
				if (if_block_1) if_block_1.d();
			}
		};
	}

	// (3:2) {#if Number(current) === 1}
	function create_if_block_1$2(component, ctx) {
		var a, text;

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.previous);
				a.href = "/";
				a.className = "pagination-previous";
				setAttribute(a, "disabled", true);
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, ctx) {
				if (changed.previous) {
					text.data = ctx.previous;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}
			}
		};
	}

	// (5:2) {:else}
	function create_if_block_2$1(component, ctx) {
		var a, text;

		function click_handler(event) {
			component.goto(event, ctx.Number(ctx.current) - 1);
		}

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.previous);
				addListener(a, "click", click_handler);
				a.href = "/";
				a.className = "pagination-previous";
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, _ctx) {
				ctx = _ctx;
				if (changed.previous) {
					text.data = ctx.previous;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				removeListener(a, "click", click_handler);
			}
		};
	}

	// (8:2) {#if Number(current) === Number(total)}
	function create_if_block_3(component, ctx) {
		var a, text;

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.next);
				a.href = "/";
				a.className = "pagination-next";
				setAttribute(a, "disabled", true);
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, ctx) {
				if (changed.next) {
					text.data = ctx.next;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}
			}
		};
	}

	// (10:2) {:else}
	function create_if_block_4(component, ctx) {
		var a, text;

		function click_handler(event) {
			component.goto(event, ctx.Number(ctx.current) + 1);
		}

		return {
			c() {
				a = createElement("a");
				text = createText(ctx.next);
				addListener(a, "click", click_handler);
				a.href = "/";
				a.className = "pagination-next";
			},

			m(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(text, a);
			},

			p(changed, _ctx) {
				ctx = _ctx;
				if (changed.next) {
					text.data = ctx.next;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(a);
				}

				removeListener(a, "click", click_handler);
			}
		};
	}

	// (2:0) {#if !noIncremental}
	function create_if_block$2(component, ctx) {
		var text, if_block_1_anchor;

		function select_block_type(ctx) {
			if (ctx.Number(ctx.current) === 1) return create_if_block_1$2;
			return create_if_block_2$1;
		}

		var current_block_type = select_block_type(ctx);
		var if_block = current_block_type(component, ctx);

		function select_block_type_1(ctx) {
			if (ctx.Number(ctx.current) === ctx.Number(ctx.total)) return create_if_block_3;
			return create_if_block_4;
		}

		var current_block_type_1 = select_block_type_1(ctx);
		var if_block_1 = current_block_type_1(component, ctx);

		return {
			c() {
				if_block.c();
				text = createText("\n  ");
				if_block_1.c();
				if_block_1_anchor = createComment();
			},

			m(target, anchor) {
				if_block.m(target, anchor);
				insertNode(text, target, anchor);
				if_block_1.m(target, anchor);
				insertNode(if_block_1_anchor, target, anchor);
			},

			p(changed, ctx) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block.d(1);
					if_block = current_block_type(component, ctx);
					if_block.c();
					if_block.m(text.parentNode, text);
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block_1) {
					if_block_1.p(changed, ctx);
				} else {
					if_block_1.d(1);
					if_block_1 = current_block_type_1(component, ctx);
					if_block_1.c();
					if_block_1.m(if_block_1_anchor.parentNode, if_block_1_anchor);
				}
			},

			d(detach) {
				if_block.d(detach);
				if (detach) {
					detachNode(text);
				}

				if_block_1.d(detach);
				if (detach) {
					detachNode(if_block_1_anchor);
				}
			}
		};
	}

	// (17:0) {#if showLeft > 1}
	function create_if_block_6(component, ctx) {
		var li;

		return {
			c() {
				li = createElement("li");
				li.innerHTML = "<span class=\"pagination-ellipsis\">…</span>";
			},

			m(target, anchor) {
				insertNode(li, target, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(li);
				}
			}
		};
	}

	// (20:0) {#each pages as page}
	function create_each_block(component, ctx) {

		var paginationlink_initial_data = {
		 	page: ctx.page,
		 	current: ctx.current,
		 	total: ctx.total,
		 	show: ctx.show
		 };
		var paginationlink = new PaginationLink({
			root: component.root,
			store: component.store,
			data: paginationlink_initial_data
		});

		paginationlink.on("change", function(event) {
			component.setPage(event);
		});

		return {
			c() {
				paginationlink._fragment.c();
			},

			m(target, anchor) {
				paginationlink._mount(target, anchor);
			},

			p(changed, ctx) {
				var paginationlink_changes = {};
				if (changed.pages) paginationlink_changes.page = ctx.page;
				if (changed.current) paginationlink_changes.current = ctx.current;
				if (changed.total) paginationlink_changes.total = ctx.total;
				if (changed.show) paginationlink_changes.show = ctx.show;
				paginationlink._set(paginationlink_changes);
			},

			d(detach) {
				paginationlink.destroy(detach);
			}
		};
	}

	// (23:0) {#if showRight < (Number(total) - 1)}
	function create_if_block_7(component, ctx) {
		var li;

		return {
			c() {
				li = createElement("li");
				li.innerHTML = "<span class=\"pagination-ellipsis\">…</span>";
			},

			m(target, anchor) {
				insertNode(li, target, anchor);
			},

			d(detach) {
				if (detach) {
					detachNode(li);
				}
			}
		};
	}

	// (14:0) {#if !noList}
	function create_if_block_5(component, ctx) {
		var ul, if_block_anchor, each_anchor, if_block_1_anchor;

		var paginationlink_initial_data = {
		 	page: "1",
		 	current: ctx.current,
		 	total: ctx.total,
		 	show: ctx.show
		 };
		var paginationlink = new PaginationLink({
			root: component.root,
			store: component.store,
			data: paginationlink_initial_data
		});

		paginationlink.on("change", function(event) {
			component.setPage(event);
		});

		var if_block = (ctx.showLeft > 1) && create_if_block_6(component, ctx);

		var each_value = ctx.pages;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		var if_block_1 = (ctx.showRight < (ctx.Number(ctx.total) - 1)) && create_if_block_7(component, ctx);

		var paginationlink_1_initial_data = {
		 	page: ctx.total,
		 	current: ctx.current,
		 	total: ctx.total,
		 	show: ctx.show
		 };
		var paginationlink_1 = new PaginationLink({
			root: component.root,
			store: component.store,
			data: paginationlink_1_initial_data
		});

		paginationlink_1.on("change", function(event) {
			component.setPage(event);
		});

		return {
			c() {
				ul = createElement("ul");
				paginationlink._fragment.c();
				if (if_block) if_block.c();
				if_block_anchor = createComment();

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
				if (if_block_1) if_block_1.c();
				if_block_1_anchor = createComment();
				paginationlink_1._fragment.c();
				ul.className = "pagination-list";
			},

			m(target, anchor) {
				insertNode(ul, target, anchor);
				paginationlink._mount(ul, null);
				if (if_block) if_block.m(ul, null);
				appendNode(if_block_anchor, ul);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}

				appendNode(each_anchor, ul);
				if (if_block_1) if_block_1.m(ul, null);
				appendNode(if_block_1_anchor, ul);
				paginationlink_1._mount(ul, null);
			},

			p(changed, ctx) {
				var paginationlink_changes = {};
				if (changed.current) paginationlink_changes.current = ctx.current;
				if (changed.total) paginationlink_changes.total = ctx.total;
				if (changed.show) paginationlink_changes.show = ctx.show;
				paginationlink._set(paginationlink_changes);

				if (ctx.showLeft > 1) {
					if (!if_block) {
						if_block = create_if_block_6(component, ctx);
						if_block.c();
						if_block.m(ul, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (changed.pages || changed.current || changed.total || changed.show) {
					each_value = ctx.pages;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if (ctx.showRight < (ctx.Number(ctx.total) - 1)) {
					if (!if_block_1) {
						if_block_1 = create_if_block_7(component, ctx);
						if_block_1.c();
						if_block_1.m(ul, if_block_1_anchor);
					}
				} else if (if_block_1) {
					if_block_1.d(1);
					if_block_1 = null;
				}

				var paginationlink_1_changes = {};
				if (changed.total) paginationlink_1_changes.page = ctx.total;
				if (changed.current) paginationlink_1_changes.current = ctx.current;
				if (changed.total) paginationlink_1_changes.total = ctx.total;
				if (changed.show) paginationlink_1_changes.show = ctx.show;
				paginationlink_1._set(paginationlink_1_changes);
			},

			d(detach) {
				if (detach) {
					detachNode(ul);
				}

				paginationlink.destroy();
				if (if_block) if_block.d();

				destroyEach(each_blocks, detach);

				if (if_block_1) if_block_1.d();
				paginationlink_1.destroy();
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.page = list[i];
		child_ctx.each_value = list;
		child_ctx.page_index = i;
		return child_ctx;
	}

	function Pagination(options) {
		init(this, options);
		this._state = assign(assign({ Number : Number }, data$b()), options.data);
		this._recompute({ current: 1, align: 1, rounded: 1, size: 1, show: 1, total: 1, showLeft: 1, showRight: 1 }, this._state);
		this._intro = true;

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$d(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(Pagination.prototype, proto);
	assign(Pagination.prototype, methods$6);

	Pagination.prototype._recompute = function _recompute(changed, state) {
		if (changed.current) {
			if (this._differs(state.currentClass, (state.currentClass = currentClass(state)))) changed.currentClass = true;
		}

		if (changed.align || changed.rounded || changed.size) {
			if (this._differs(state.classes, (state.classes = classes$2(state)))) changed.classes = true;
		}

		if (changed.current || changed.show) {
			if (this._differs(state.showLeft, (state.showLeft = showLeft(state)))) changed.showLeft = true;
			if (this._differs(state.showRight, (state.showRight = showRight(state)))) changed.showRight = true;
		}

		if (changed.total || changed.showLeft || changed.showRight) {
			if (this._differs(state.pages, (state.pages = pages(state)))) changed.pages = true;
		}
	};

	/* src/tabs/TabsContainer.html generated by Svelte v2.9.7 */

	function classes$3({ align, boxed, size, toggle, rounded, fullWidth }) {
	  const classList = ['tabs'];

	  align && classList.push(`is-${align}`);
	  boxed && classList.push('is-boxed');
	  size && classList.push(`is-${size}`);
	  toggle && classList.push('is-toggle');
	  toggle && rounded && classList.push('is-toggle-rounded');
	  fullWidth && classList.push('is-fullwidth');

	  return classList.join(' ')
	}

	function data$c() {
		return {
	  active: 0,
	  align: '',
	  boxed: false,
	  class: '',
	  size: '',
	  toggle: false,
	  rounded: false,
	  fullWidth: false
	};
	}

	function create_main_fragment$e(component, ctx) {
		var div, ul, slot_content_default = component._slotted.default, slot_content_default_after, div_class_value;

		return {
			c() {
				div = createElement("div");
				ul = createElement("ul");
				div.className = div_class_value = "" + ctx.classes + " " + ctx.class;
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(ul, div);

				if (slot_content_default) {
					appendNode(slot_content_default, ul);
					appendNode(slot_content_default_after || (slot_content_default_after = createComment()), ul);
				}
			},

			p(changed, ctx) {
				if ((changed.classes || changed.class) && div_class_value !== (div_class_value = "" + ctx.classes + " " + ctx.class)) {
					div.className = div_class_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (slot_content_default) {
					reinsertBefore(slot_content_default_after, slot_content_default);
				}
			}
		};
	}

	function TabsContainer(options) {
		init(this, options);
		this._state = assign(data$c(), options.data);
		this._recompute({ align: 1, boxed: 1, size: 1, toggle: 1, rounded: 1, fullWidth: 1 }, this._state);
		this._intro = true;

		this._slotted = options.slots || {};

		this.slots = {};

		this._fragment = create_main_fragment$e(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(TabsContainer.prototype, proto);

	TabsContainer.prototype._recompute = function _recompute(changed, state) {
		if (changed.align || changed.boxed || changed.size || changed.toggle || changed.rounded || changed.fullWidth) {
			if (this._differs(state.classes, (state.classes = classes$3(state)))) changed.classes = true;
		}
	};

	/* src/tabs/TabItem.html generated by Svelte v2.9.7 */

	function uid({ id, label }) {
		return id || slugify(label);
	}

	function data$d() {
		return {
	  id: null,
	  href: false,
	  active: false,
	  icon: '',
	  label: ''
	};
	}

	var methods$7 = {
	  selectTab (event) {
	    event.preventDefault();
	    const { uid } = this.get();
	    const { item } = this.refs;

	    // See: http://clubmate.fi/the-intuitive-and-powerful-foreach-loop-in-javascript/
	    Array.prototype.forEach.call(item.parentNode.children, (el, i) => {
	      if (el.id !== uid) {
	        el.classList.remove('is-active');
	      }
	    });
	    item.classList.add('is-active');
	    this.set({ active: true });
	    this.fire('click', uid);
	  }
	};

	function oncreate() {
	  const { active } = this.get();
	  const { item } = this.refs;
	  if (active) {
	    item.classList.add('is-active');
	  }
	}
	/* eslint-disable no-useless-escape */
	function slugify (text) {
	  return text.toString().toLowerCase()
	    .replace(/\s+/g, '-')           // Replace spaces with -
	    .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
	    .replace(/\-\-+/g, '-')         // Replace multiple - with single -
	    .replace(/^-+/, '')             // Trim - from start of text
	    .replace(/-+$/, '')             // Trim - from end of text
	}

	function create_main_fragment$f(component, ctx) {
		var li, a, text_1, span, text_2;

		var if_block = (ctx.icon) && create_if_block$3(component, ctx);

		function click_handler(event) {
			component.selectTab(event);
		}

		return {
			c() {
				li = createElement("li");
				a = createElement("a");
				if (if_block) if_block.c();
				text_1 = createText("\n    ");
				span = createElement("span");
				text_2 = createText(ctx.label);
				addListener(a, "click", click_handler);
				a.href = "/";
				li.id = ctx.uid;
			},

			m(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(a, li);
				if (if_block) if_block.m(a, null);
				appendNode(text_1, a);
				appendNode(span, a);
				appendNode(text_2, span);
				component.refs.item = li;
			},

			p(changed, ctx) {
				if (ctx.icon) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block$3(component, ctx);
						if_block.c();
						if_block.m(a, text_1);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (changed.label) {
					text_2.data = ctx.label;
				}

				if (changed.uid) {
					li.id = ctx.uid;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(li);
				}

				if (if_block) if_block.d();
				removeListener(a, "click", click_handler);
				if (component.refs.item === li) component.refs.item = null;
			}
		};
	}

	// (3:0) {#if icon}
	function create_if_block$3(component, ctx) {
		var span, i;

		return {
			c() {
				span = createElement("span");
				i = createElement("i");
				i.className = ctx.icon;
				setAttribute(i, "aria-hidden", "true");
				span.className = "icon is-small";
			},

			m(target, anchor) {
				insertNode(span, target, anchor);
				appendNode(i, span);
			},

			p(changed, ctx) {
				if (changed.icon) {
					i.className = ctx.icon;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(span);
				}
			}
		};
	}

	function TabItem(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data$d(), options.data);
		this._recompute({ id: 1, label: 1 }, this._state);
		this._intro = true;

		if (!options.root) {
			this._oncreate = [];
		}

		this._fragment = create_main_fragment$f(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}
	}

	assign(TabItem.prototype, proto);
	assign(TabItem.prototype, methods$7);

	TabItem.prototype._recompute = function _recompute(changed, state) {
		if (changed.id || changed.label) {
			if (this._differs(state.uid, (state.uid = uid(state)))) changed.uid = true;
		}
	};

	exports.Dropdown = Dropdown;
	exports.DropdownItem = DropdownItem;
	exports.DropdownLink = DropdownLink;
	exports.DropdownDivider = DropdownDivider;
	exports.Modal = Modal;
	exports.ModalCard = ModalCard;
	exports.Navbar = Navbar;
	exports.NavbarDivider = NavbarDivider;
	exports.NavbarDropdown = NavbarDropdown;
	exports.NavbarEnd = NavbarEnd;
	exports.NavbarItem = NavbarItem;
	exports.NavbarStart = NavbarStart;
	exports.Pagination = Pagination;
	exports.TabsContainer = TabsContainer;
	exports.TabItem = TabItem;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
